{"ast":null,"code":"/*\nGoal: generate faces that are parameterized by at least 3 variables\n\nThis one didn't really grab me too much creatively, - I think I got bogged down in the learning.\nIt was a great learning exercise though, I got quite a good crash course in drawing shapes with p5,\nand using Perlin noise to make adjustments at the point level to give the shapes a hand-drawn feel.\n\nPress any key for a fun surprise!\n\nA fun stretch goal for this one for the future would be to use real faces. Like, you take a photo of your face,\nthe program parametrically warps it. This is much more complicated though, would need to learn some computer vision\ntechniques lol\n\n*/\n\nfunction get_point_with_perlin_noise(xCoord, yCoord, noiseFactor) {\n  if (noiseFactor === undefined) {\n    noiseFactor = Math.random() * 4;\n  }\n  // Apply Perlin noise to add smooth randomness to the vertex positions\n  const noiseVal = noise(xCoord * 0.01, yCoord * 0.01, noiseFactor * 0.01);\n  const offsetX = map(noiseVal, 0, 1, -15, 15);\n  const offsetY = map(noiseVal, 0, 1, -15, 15);\n  return {\n    x: xCoord + offsetX,\n    y: yCoord + offsetY\n  };\n}\nfunction draw_perlin_arc(centerX, centerY, size, noiseFactor, start_angle, end_angle) {\n  const numPoints = 100;\n  let outline_points = [];\n  for (let i = 0; i <= numPoints; i++) {\n    const angle = map(i, 0, numPoints, start_angle, end_angle);\n    let xCoord = centerX + size * cos(angle);\n    let yCoord = centerY + size * sin(angle);\n    outline_points[i] = get_point_with_perlin_noise(xCoord, yCoord, noiseFactor);\n  }\n  beginShape();\n  for (let i = 0; i <= numPoints; i++) {\n    const {\n      x,\n      y\n    } = outline_points[i];\n    vertex(x, y);\n  }\n  endShape();\n}\nfunction draw_perlin_circle(centerX, centerY, size, noiseFactor) {\n  draw_perlin_arc(centerX, centerY, size, noiseFactor, 0, TWO_PI);\n}\nfunction draw_perlin_line(startX, startY, endX, endY) {\n  const numPoints = 100;\n  let outline_points = [];\n  for (let i = 0; i <= numPoints; i++) {\n    xCoord = lerp(startX, endX, map(i, 0, numPoints, 0.0, 1.0));\n    yCoord = lerp(startY, endY, map(i, 0, numPoints, 0.0, 1.0));\n    outline_points[i] = get_point_with_perlin_noise(xCoord, yCoord);\n  }\n  beginShape();\n  for (let i = 0; i <= numPoints; i++) {\n    const {\n      x,\n      y\n    } = outline_points[i];\n    vertex(x, y);\n  }\n  endShape();\n}\nclass Eyes {\n  constructor(centerX, centerY) {\n    this.right_eye_points = [];\n    this.left_eye_points = [];\n    this.eye_saturation = 60;\n    this.eye_brightness = 75;\n    this.centerX = centerX;\n    this.centerY = centerY;\n    this.eye_distance = floor(Math.random() * 10 + 40);\n    this.eye_size = floor(Math.random() * 10 + 25);\n    this.eye_coords = {\n      right: {\n        x: this.centerX - this.eye_distance,\n        y: this.centerY - 25\n      },\n      left: {\n        x: this.centerX + this.eye_distance,\n        y: this.centerY - 25\n      }\n    };\n    this.eye_hue = floor(Math.random() * (300 - 150) + 150);\n  }\n  draw() {\n    if (third_eye) {\n      this.draw_third_eye();\n      return;\n    }\n    stroke(0);\n    draw_perlin_line(this.centerX, this.centerY - 33, this.centerX, this.centerY - 79);\n    noStroke();\n    fill(\"white\");\n    draw_perlin_circle(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size, 0);\n    draw_perlin_circle(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size, 0);\n    noStroke();\n    fill(this.eye_hue, this.eye_saturation, this.eye_brightness);\n    draw_perlin_circle(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size / 2, 0);\n    draw_perlin_circle(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size / 2, 0);\n    fill(\"black\");\n    draw_perlin_circle(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size / 3, 0);\n    draw_perlin_circle(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size / 3, 0);\n    fill(\"white\");\n  }\n  draw_third_eye() {\n    stroke(0);\n    draw_perlin_arc(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size, Math.random() * 4, 0, PI);\n    draw_perlin_arc(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size, Math.random() * 4, 0, PI);\n    noStroke();\n    fill(\"white\");\n    draw_perlin_arc(this.centerX - this.eye_size / 2, this.centerY - 55, this.eye_size, 0, 5 * PI / 3, TWO_PI + PI / 3);\n    draw_perlin_arc(this.centerX + this.eye_size / 2, this.centerY - 55, this.eye_size, 0, 2 * PI / 3, 4 * PI / 3);\n    noStroke();\n    fill(eye_hue, this.eye_saturation, this.eye_brightness);\n    draw_perlin_circle(this.centerX, this.centerY - 56, this.eye_size / 2, 0);\n    stroke(0);\n    fill(\"black\");\n    draw_perlin_circle(this.centerX, this.centerY - 56, this.eye_size / 4, 0);\n    fill(\"white\");\n  }\n}\nclass Face {\n  constructor(centerX, centerY) {\n    this.face_points = [];\n    this.size = 100;\n    this.centerX = centerX;\n    this.centerY = centerY;\n    this.face_points = this.face_outline_points();\n    this.skin_tone = color(floor(Math.random() * 40), floor(Math.random() * 30), floor(Math.random() * 40 + 60));\n    this.eyes = new Eyes(centerX, centerY);\n    this.mouthControlPoint = {\n      x: this.centerX,\n      y: this.centerY + floor(Math.random() * 90)\n    };\n    this.mouthHeight = floor(Math.random() * 10) + 35;\n  }\n  face_outline_points() {\n    const radius = 100;\n    const numPoints = 100;\n    let points = [];\n    let taperMin = map(Math.random(), 0, 1, 0.8, 1.25);\n    for (let i = 0; i < numPoints; i++) {\n      const angle = map(i, 0, numPoints, 0, TWO_PI);\n      let taperFactor = 1;\n      if (i < numPoints / 2) {\n        if (i <= numPoints / 8) {\n          taperFactor = map(i, 0, numPoints * 1 / 8, 1, taperMin);\n        } else if (i <= numPoints / 4) {\n          taperFactor = map(i, numPoints / 8, numPoints / 4, taperMin, 1);\n        } else if (i <= numPoints * (3 / 8)) {\n          taperFactor = map(i, numPoints / 4, numPoints * (3 / 8), 1, taperMin);\n        } else if (i >= numPoints * (3 / 8)) {\n          taperFactor = map(i, numPoints * (3 / 8), numPoints / 2, taperMin, 1);\n        }\n      }\n      let xCoord = this.centerX + radius * cos(angle) * taperFactor;\n      let yCoord = this.centerY + radius * sin(angle) * taperFactor;\n      points[i] = get_point_with_perlin_noise(xCoord, yCoord, 2);\n    }\n    return points;\n  }\n  draw_face_outline() {\n    fill(this.skin_tone);\n    noStroke();\n    beginShape();\n    for (let i = 0; i < this.face_points.length; i++) {\n      const {\n        x,\n        y\n      } = this.face_points[i];\n      vertex(x, y);\n    }\n    endShape(CLOSE);\n  }\n  mouth() {\n    // if (third_eye) {\n    //   fill(\"black\");\n    //   draw_perlin_circle(this.centerX, this.centerY + 50, 30);\n    //   fill(\"white\");\n    //   return;\n    // }\n    stroke(0);\n    fill(this.skin_tone);\n    beginShape();\n    vertex(this.centerX - this.mouthHeight, this.centerY + this.mouthHeight);\n    quadraticVertex(this.mouthControlPoint.x, this.mouthControlPoint.y, this.centerX + this.mouthHeight, this.centerY + this.mouthHeight);\n    endShape();\n  }\n  hair() {}\n  draw_face() {\n    this.draw_face_outline();\n    this.eyes.draw();\n    this.mouth();\n  }\n}\nlet third_eye = false,\n  eye_hue,\n  gradient_position = 0.0,\n  up = true;\nlet testpath, svg, ctx, canvas, img;\nlet faces = [];\nfunction setup() {\n  canvas = p5.createCanvas(2000, 2000);\n  p5.colorMode(HSB);\n  ctx = canvas.drawingContext;\n  let centerX = 200,\n    centerY = 200;\n  for (let i = 0; i < 4; i++) {\n    faces[i] = new Face(centerX, centerY);\n    centerX += 250;\n  }\n  let eye_hue = Math.floor(Math.random() * 360);\n}\nasync function draw(p5) {\n  if (third_eye) {\n    eye_hue = lerp(0, 360, gradient_position);\n    if (up) {\n      gradient_position += 0.004;\n    } else {\n      gradient_position -= 0.004;\n    }\n    if (gradient_position <= 0.0 || gradient_position >= 1.0) {\n      up = !up;\n    }\n    p5.background(color(eye_hue, 13, 98));\n  } else {\n    p5.background(color(286, 23, 98));\n  }\n\n  //draw 4 randomly proportioned faces\n  for (let j = 0; j < faces.length; j++) {\n    faces[j].draw_face();\n  }\n}\nfunction keyPressed() {\n  third_eye = !third_eye;\n}","map":{"version":3,"names":["get_point_with_perlin_noise","xCoord","yCoord","noiseFactor","undefined","Math","random","noiseVal","noise","offsetX","map","offsetY","x","y","draw_perlin_arc","centerX","centerY","size","start_angle","end_angle","numPoints","outline_points","i","angle","cos","sin","beginShape","vertex","endShape","draw_perlin_circle","TWO_PI","draw_perlin_line","startX","startY","endX","endY","lerp","Eyes","constructor","right_eye_points","left_eye_points","eye_saturation","eye_brightness","eye_distance","floor","eye_size","eye_coords","right","left","eye_hue","draw","third_eye","draw_third_eye","stroke","noStroke","fill","PI","Face","face_points","face_outline_points","skin_tone","color","eyes","mouthControlPoint","mouthHeight","radius","points","taperMin","taperFactor","draw_face_outline","length","CLOSE","mouth","quadraticVertex","hair","draw_face","gradient_position","up","testpath","svg","ctx","canvas","img","faces","setup","p5","createCanvas","colorMode","HSB","drawingContext","background","j","keyPressed"],"sources":["/Users/katieadamsky/katie-adamsky.github.io/site/src/pages/projects/faces/sketch.js"],"sourcesContent":["/*\nGoal: generate faces that are parameterized by at least 3 variables\n\nThis one didn't really grab me too much creatively, - I think I got bogged down in the learning.\nIt was a great learning exercise though, I got quite a good crash course in drawing shapes with p5,\nand using Perlin noise to make adjustments at the point level to give the shapes a hand-drawn feel.\n\nPress any key for a fun surprise!\n\nA fun stretch goal for this one for the future would be to use real faces. Like, you take a photo of your face,\nthe program parametrically warps it. This is much more complicated though, would need to learn some computer vision\ntechniques lol\n\n*/\n\n\nfunction get_point_with_perlin_noise(xCoord, yCoord, noiseFactor) {\n    if (noiseFactor === undefined) {\n      noiseFactor = Math.random()*4;\n    }\n    // Apply Perlin noise to add smooth randomness to the vertex positions\n    const noiseVal = noise(xCoord * 0.01, yCoord * 0.01, noiseFactor*0.01);\n    const offsetX = map(noiseVal, 0, 1, -15, 15);\n    const offsetY = map(noiseVal, 0, 1, -15, 15);\n    return {x: xCoord+offsetX, y: yCoord+offsetY};\n  }\n  \n  function draw_perlin_arc(centerX, centerY, size, noiseFactor, start_angle, end_angle) {\n      const numPoints = 100;\n      let outline_points = [];\n      for (let i=0; i <= numPoints; i++) {\n        const angle = map(i, 0, numPoints, start_angle, end_angle);\n        let xCoord = centerX + size * cos(angle);\n        let yCoord = centerY + size * sin(angle);\n        \n        outline_points[i] = get_point_with_perlin_noise(xCoord, yCoord, noiseFactor);\n      }\n  \n      beginShape();\n      for(let i = 0; i <= numPoints; i++) {\n        const { x, y } = outline_points[i];\n        vertex(x, y);\n      }\n      endShape();\n  }\n  \n  \n    function draw_perlin_circle(centerX, centerY, size, noiseFactor) {\n      draw_perlin_arc(centerX, centerY, size, noiseFactor, 0, TWO_PI);\n    }\n  \n    function draw_perlin_line(startX, startY, endX, endY) {\n      const numPoints = 100;\n      let outline_points = [];\n      for (let i=0; i <= numPoints; i++) {\n        xCoord = lerp(startX, endX, map(i, 0, numPoints, 0.0, 1.0));\n        yCoord = lerp(startY, endY, map(i, 0, numPoints, 0.0, 1.0));\n        \n        outline_points[i] = get_point_with_perlin_noise(xCoord, yCoord);\n      }\n  \n      beginShape();\n      for(let i = 0; i <= numPoints; i++) {\n        const { x, y } = outline_points[i];\n        vertex(x, y);\n      }\n      endShape();\n    }\n  \n  class Eyes {\n    centerX;\n    centerY;\n    right_eye_points = [];\n    left_eye_points = [];\n    eye_coords;\n    eye_hue;\n    eye_saturation = 60;\n    eye_brightness = 75;\n  \n    constructor(centerX, centerY) {\n      this.centerX = centerX;\n      this.centerY = centerY;\n      this.eye_distance = floor(Math.random()*10 + 40);\n      this.eye_size = floor(Math.random()*10+25);\n      this.eye_coords = {\n        right: {x: this.centerX - this.eye_distance, y: this.centerY - 25},\n        left: {x: this.centerX + this.eye_distance, y: this.centerY - 25},\n      }\n      this.eye_hue = floor(Math.random()*(300-150)+150);\n    }\n  \n  \n    draw() {\n      if (third_eye) {\n        this.draw_third_eye();\n        return;\n      }\n      stroke(0);\n      draw_perlin_line(this.centerX, this.centerY - 33, this.centerX, this.centerY - 79);\n      noStroke();\n      fill(\"white\");\n      draw_perlin_circle(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size,0);\n      draw_perlin_circle(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size,0);\n  \n      noStroke();\n  \n      fill(this.eye_hue, this.eye_saturation, this.eye_brightness);\n      draw_perlin_circle(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size /2, 0);\n      draw_perlin_circle(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size /2, 0);\n  \n  \n      fill(\"black\");\n      draw_perlin_circle(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size /3, 0);\n      draw_perlin_circle(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size /3, 0);\n      fill(\"white\");\n    }\n  \n    draw_third_eye() {\n      stroke(0);\n      draw_perlin_arc(this.eye_coords.right.x, this.eye_coords.right.y, this.eye_size, Math.random()*4, 0, PI);\n      draw_perlin_arc(this.eye_coords.left.x, this.eye_coords.left.y, this.eye_size, Math.random()*4, 0, PI);\n      noStroke();\n  \n      fill(\"white\");\n      draw_perlin_arc(this.centerX-this.eye_size/2, this.centerY-55, this.eye_size, 0, 5*PI/3, TWO_PI+PI/3);\n      draw_perlin_arc(this.centerX+this.eye_size/2, this.centerY-55, this.eye_size, 0, 2*PI/3, 4*PI/3);\n      noStroke();\n  \n      fill(eye_hue, this.eye_saturation, this.eye_brightness);\n      draw_perlin_circle(this.centerX, this.centerY - 56, this.eye_size /2, 0);\n      stroke(0);\n  \n      fill(\"black\");\n      draw_perlin_circle(this.centerX, this.centerY - 56, this.eye_size /4, 0);\n      fill(\"white\");\n  \n    }\n  }\n  \n  class Face {\n    face_points = [];\n    size = 100;\n    centerX;\n    centerY;\n    eyes;\n    mustache;\n    mouthControlPoint;\n    mouthHeight;\n    skin_tone;\n  \n    constructor(centerX, centerY) {\n      this.centerX = centerX;\n      this.centerY = centerY;\n      this.face_points = this.face_outline_points();\n      this.skin_tone = color(floor(Math.random()*40), floor(Math.random()*30), floor(Math.random()*40+60));\n  \n      this.eyes = new Eyes(centerX, centerY);\n      this.mouthControlPoint = {x: this.centerX, y: this.centerY + floor(Math.random()*90)}\n      this.mouthHeight = floor(Math.random()*10) + 35;\n    }\n  \n    face_outline_points() {\n      const radius = 100;\n      const numPoints = 100;\n      let points = [];\n      let taperMin = map(Math.random(), 0, 1, 0.8, 1.25);\n      \n      for (let i = 0; i < numPoints; i++) {\n        const angle = map(i, 0, numPoints, 0, TWO_PI);\n        let taperFactor = 1;\n        if (i < (numPoints/2)) {\n          if (i <= numPoints/8) {\n            taperFactor = map(i, 0, numPoints*1/8, 1, taperMin);\n          } else if (i <= numPoints/4) {\n            taperFactor = map(i, numPoints/8, numPoints/4, taperMin, 1);\n          } else if (i <= numPoints *(3/8)) {\n            taperFactor = map(i, numPoints/4, numPoints*(3/8), 1, taperMin);\n          }\n          else if(i >= numPoints*(3/8)) {\n            taperFactor = map(i, numPoints*(3/8), numPoints/2, taperMin, 1);\n          } \n        }\n        let xCoord = this.centerX + radius * cos(angle)*taperFactor;\n        let yCoord = this.centerY + radius * sin(angle)*taperFactor;\n  \n        points[i] = get_point_with_perlin_noise(xCoord, yCoord, 2);\n      }\n      return points;\n    }\n  \n    draw_face_outline() {\n      fill(this.skin_tone);\n      noStroke();\n      beginShape();\n      for (let i = 0; i < this.face_points.length; i++) {\n        const { x, y } = this.face_points[i];\n        vertex(x, y);\n      }\n      endShape(CLOSE);\n    }\n  \n    mouth() {\n      // if (third_eye) {\n      //   fill(\"black\");\n      //   draw_perlin_circle(this.centerX, this.centerY + 50, 30);\n      //   fill(\"white\");\n      //   return;\n      // }\n      stroke(0);\n      fill(this.skin_tone);\n      beginShape();\n      vertex(this.centerX - this.mouthHeight, this.centerY + this.mouthHeight);\n      quadraticVertex(this.mouthControlPoint.x, this.mouthControlPoint.y, this.centerX+this.mouthHeight, this.centerY+this.mouthHeight);\n      endShape();\n    }\n  \n    hair() {\n  \n    }\n  \n    draw_face() {\n      this.draw_face_outline();\n      this.eyes.draw();\n      this.mouth();\n    }\n  \n  }\n  \n  let third_eye = false, eye_hue, gradient_position = 0.0, up = true;\n  let testpath, svg, ctx, canvas, img;\n  let faces = [];\n  \n  function setup() {\n    canvas = p5.createCanvas(2000, 2000);\n    p5.colorMode(HSB); \n  \n    ctx = canvas.drawingContext;\n  \n    let centerX = 200, centerY = 200;\n    for (let i=0; i<4; i++) {\n      faces[i] = new Face(centerX, centerY);\n      centerX += 250;\n    }\n    let eye_hue = Math.floor(Math.random()*360);\n  }\n  \n  async function draw(p5) {\n    if (third_eye) {\n      eye_hue = lerp(0, 360, gradient_position);\n      if (up) {\n        gradient_position += 0.004;\n      } else {\n        gradient_position -= 0.004;\n      }\n      if (gradient_position <= 0.0 || gradient_position >= 1.0) {\n        up = !up;\n      }\n      p5.background(color(eye_hue, 13, 98));\n    } else {\n      p5.background(color(286, 23, 98));\n    }\n  \n  \n    //draw 4 randomly proportioned faces\n    for(let j = 0; j < faces.length; j++) {\n      faces[j].draw_face();\n    }\n  }\n  \n  function keyPressed() {\n    third_eye = !third_eye;\n  }\n  \n  \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}