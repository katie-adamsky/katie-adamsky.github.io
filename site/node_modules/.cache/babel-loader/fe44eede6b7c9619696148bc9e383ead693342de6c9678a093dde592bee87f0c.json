{"ast":null,"code":"var _jsxFileName = \"/Users/katieadamsky/katie-adamsky.github.io/site/src/pages/projects/Breath.js\";\nimport { ReactP5Wrapper } from \"@p5-wrapper/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet base_size = 150,\n  size_change = 0,\n  inhaling = true,\n  paused = false;\nlet lerp_color1,\n  lerp_color2,\n  color1 = 0,\n  color2 = 1,\n  color3 = 2,\n  color4 = 3;\nfunction sketch(p5) {\n  p5.setup = () => p5.createCanvas(600, 400, p5.WEBGL);\n  p5.draw = () => {\n    p5.background(\"black\");\n    p5.noStroke();\n    let elements = {\n      water: p5.color(212, 44, 100),\n      fire: p5.color(4, 68, 100),\n      earth: p5.color(130, 65, 68),\n      air: p5.color(304, 8, 100)\n    };\n    if (!paused) {\n      if (size_change >= 65 || size_change <= -42) {\n        inhaling = !inhaling;\n      }\n      let gradient_position = p5.map(p5.abs(size_change), 0, 65, 0, 1);\n      if (inhaling) {\n        size_change += 2;\n      } else {\n        size_change -= 2;\n      }\n      lerp_color1 = p5.lerpColor(Object.entries(elements)[color1][1], Object.entries(elements)[color2][1], gradient_position);\n      lerp_color2 = p5.lerpColor(Object.entries(elements)[color3][1], Object.entries(elements)[color4][1], gradient_position);\n    }\n    tesselation(base_size / 2, base_size / 2, base_size + size_change);\n  };\n}\nfunction tesselation(x, y, size) {\n  let centerX = x,\n    centerY = y;\n  for (let i = 0; i < 20; i++) {\n    for (let j = 0; j < 20; j++) {\n      let skip = 0;\n      index = skipped_cells.findIndex(coordinates => JSON.stringify(coordinates[0]) === JSON.stringify([i, j]));\n      if (index !== -1) {\n        skip = skipped_cells[index][1];\n      }\n      if (skip !== 1) {\n        fill(lerp_color1);\n        star(centerX, centerY, size / 2);\n      }\n      if (skip !== 2) {\n        fill(\"black\");\n        star(centerX, centerY, size / 2.65);\n      }\n      if (skip !== 3) {\n        fill(lerp_color1);\n        star(centerX, centerY, size / 4);\n      }\n      if (skip !== 4) {\n        fill(\"black\");\n        star(centerX, centerY, size / 8);\n      }\n      if (skip !== 5) {\n        fill(lerp_color2);\n        inverted_star(centerX + base_size / 2, centerY + base_size / 2, (base_size - size_change) / 5);\n      }\n      if (skip !== 6) {\n        fill(\"black\");\n        inverted_star(centerX + base_size / 2, centerY + base_size / 2, (base_size - size_change) / 10);\n      }\n      if (skip !== 7) {\n        fill(lerp_color2);\n        inverted_star(centerX + base_size / 2, centerY + base_size / 2, (base_size - size_change) / 20);\n      }\n      centerX += base_size;\n    }\n    centerX = x;\n    centerY += base_size;\n  }\n}\nexport default function Breath() {\n  return /*#__PURE__*/_jsxDEV(ReactP5Wrapper, {\n    sketch: sketch\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 10\n  }, this);\n}\n_c = Breath;\nvar _c;\n$RefreshReg$(_c, \"Breath\");","map":{"version":3,"names":["ReactP5Wrapper","jsxDEV","_jsxDEV","base_size","size_change","inhaling","paused","lerp_color1","lerp_color2","color1","color2","color3","color4","sketch","p5","setup","createCanvas","WEBGL","draw","background","noStroke","elements","water","color","fire","earth","air","gradient_position","map","abs","lerpColor","Object","entries","tesselation","x","y","size","centerX","centerY","i","j","skip","index","skipped_cells","findIndex","coordinates","JSON","stringify","fill","star","inverted_star","Breath","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/katieadamsky/katie-adamsky.github.io/site/src/pages/projects/Breath.js"],"sourcesContent":["import { ReactP5Wrapper } from \"@p5-wrapper/react\";\n\nlet base_size = 150, size_change = 0, inhaling = true, paused = false;\nlet lerp_color1, lerp_color2, color1 = 0, color2 = 1, color3 = 2, color4 = 3;\n\nfunction sketch(p5) {\n  p5.setup = () => p5.createCanvas(600, 400, p5.WEBGL);\n\n  p5.draw = () => {\n    p5.background(\"black\"); \n    p5.noStroke();\n    let elements = {\n      water: p5.color(212, 44, 100), \n      fire: p5.color(4, 68, 100), \n      earth: p5.color(130, 65, 68), \n      air: p5.color(304, 8, 100),\n    }\n    if (!paused) {\n      if (size_change >= 65 || size_change <= -42) {\n        inhaling = !inhaling;\n      }\n      let gradient_position = p5.map(p5.abs(size_change), 0, 65, 0, 1);\n      if (inhaling) {\n        size_change += 2;\n      } else {\n        size_change -= 2;\n      }\n      lerp_color1 = p5.lerpColor(Object.entries(elements)[color1][1], Object.entries(elements)[color2][1], gradient_position);\n      lerp_color2 = p5.lerpColor(Object.entries(elements)[color3][1], Object.entries(elements)[color4][1], gradient_position);\n    }\n    tesselation(base_size/2, base_size/2, base_size + size_change);\n  };\n}\n\nfunction tesselation(x, y, size) {\n  let centerX = x, centerY = y;\n  for(let i=0; i < 20; i++) {\n    for(let j=0; j < 20; j++) {\n      let skip = 0;\n      index = skipped_cells.findIndex(coordinates => JSON.stringify(coordinates[0]) === JSON.stringify([i,j]));\n      if (index !== -1){\n        skip = skipped_cells[index][1];\n      }\n      if (skip !== 1) {\n        fill(lerp_color1);\n        star(centerX, centerY, size/2);\n      }\n      if (skip !== 2) {\n        fill(\"black\");\n        star(centerX, centerY, size/2.65);\n      } \n      if (skip !== 3) {\n        fill(lerp_color1);\n        star(centerX, centerY, size/4);\n      }\n      if (skip !== 4) {\n        fill(\"black\");\n        star(centerX, centerY, size/8);\n      }\n      if (skip !== 5) {\n        fill(lerp_color2);\n        inverted_star(centerX+base_size/2, centerY+base_size/2, (base_size-size_change)/5);\n      }\n      if (skip !== 6) {\n        fill(\"black\");\n        inverted_star(centerX+base_size/2, centerY+base_size/2, (base_size-size_change)/10);\n      }\n      if (skip !== 7) {\n        fill(lerp_color2);\n        inverted_star(centerX+base_size/2, centerY+base_size/2, (base_size-size_change)/20);\n      }\n      centerX += base_size;\n    }\n    centerX = x;\n    centerY += base_size;\n  }\n\n}\n\nexport default function Breath() {\n  return <ReactP5Wrapper sketch={sketch} />;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}